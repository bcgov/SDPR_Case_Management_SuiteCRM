import { OverridableMap } from '../../types/overridable-map';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
class RecordMapperRegistry {
    constructor() {
        this.init();
    }
    register(module, key, mapper) {
        this.map.addEntry(module, key, mapper);
    }
    exclude(module, key) {
        this.map.excludeEntry(module, key);
    }
    get(module) {
        return this.map.getGroupEntries(module);
    }
    has(module, key) {
        const moduleFields = this.map.getGroupEntries(module);
        return !!moduleFields[key];
    }
    init() {
        this.map = new OverridableMap();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: RecordMapperRegistry, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: RecordMapperRegistry, providedIn: 'root' }); }
}
export { RecordMapperRegistry };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: RecordMapperRegistry, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3JkLW1hcHBlci5yZWdpc3RyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2NvcmUvYXBwL2NvbW1vbi9zcmMvbGliL3JlY29yZC9yZWNvcmQtbWFwcGVycy9yZWNvcmQtbWFwcGVyLnJlZ2lzdHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJCQSxPQUFPLEVBQVcsY0FBYyxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDckUsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7QUFFekMsTUFHYSxvQkFBb0I7SUFHN0I7UUFDSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVNLFFBQVEsQ0FBQyxNQUFjLEVBQUUsR0FBVyxFQUFFLE1BQW9CO1FBQzdELElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVNLE9BQU8sQ0FBQyxNQUFjLEVBQUUsR0FBVztRQUN0QyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVNLEdBQUcsQ0FBQyxNQUFjO1FBRXJCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVNLEdBQUcsQ0FBQyxNQUFjLEVBQUUsR0FBVztRQUVsQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV0RCxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVTLElBQUk7UUFDVixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksY0FBYyxFQUFnQixDQUFDO0lBQ2xELENBQUM7OEdBN0JRLG9CQUFvQjtrSEFBcEIsb0JBQW9CLGNBRmpCLE1BQU07O1NBRVQsb0JBQW9COzJGQUFwQixvQkFBb0I7a0JBSGhDLFVBQVU7bUJBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTdWl0ZUNSTSBpcyBhIGN1c3RvbWVyIHJlbGF0aW9uc2hpcCBtYW5hZ2VtZW50IHByb2dyYW0gZGV2ZWxvcGVkIGJ5IFNhbGVzQWdpbGl0eSBMdGQuXG4gKiBDb3B5cmlnaHQgKEMpIDIwMjEgU2FsZXNBZ2lsaXR5IEx0ZC5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeSBpdCB1bmRlclxuICogdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdmVyc2lvbiAzIGFzIHB1Ymxpc2hlZCBieSB0aGVcbiAqIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiB3aXRoIHRoZSBhZGRpdGlvbiBvZiB0aGUgZm9sbG93aW5nIHBlcm1pc3Npb24gYWRkZWRcbiAqIHRvIFNlY3Rpb24gMTUgYXMgcGVybWl0dGVkIGluIFNlY3Rpb24gNyhhKTogRk9SIEFOWSBQQVJUIE9GIFRIRSBDT1ZFUkVEIFdPUktcbiAqIElOIFdISUNIIFRIRSBDT1BZUklHSFQgSVMgT1dORUQgQlkgU0FMRVNBR0lMSVRZLCBTQUxFU0FHSUxJVFkgRElTQ0xBSU1TIFRIRVxuICogV0FSUkFOVFkgT0YgTk9OIElORlJJTkdFTUVOVCBPRiBUSElSRCBQQVJUWSBSSUdIVFMuXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dCBXSVRIT1VUXG4gKiBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTU1xuICogRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZVxuICogZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqIEluIGFjY29yZGFuY2Ugd2l0aCBTZWN0aW9uIDcoYikgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogdmVyc2lvbiAzLCB0aGVzZSBBcHByb3ByaWF0ZSBMZWdhbCBOb3RpY2VzIG11c3QgcmV0YWluIHRoZSBkaXNwbGF5IG9mIHRoZVxuICogXCJTdXBlcmNoYXJnZWQgYnkgU3VpdGVDUk1cIiBsb2dvLiBJZiB0aGUgZGlzcGxheSBvZiB0aGUgbG9nb3MgaXMgbm90IHJlYXNvbmFibHlcbiAqIGZlYXNpYmxlIGZvciB0ZWNobmljYWwgcmVhc29ucywgdGhlIEFwcHJvcHJpYXRlIExlZ2FsIE5vdGljZXMgbXVzdCBkaXNwbGF5XG4gKiB0aGUgd29yZHMgXCJTdXBlcmNoYXJnZWQgYnkgU3VpdGVDUk1cIi5cbiAqL1xuXG5pbXBvcnQge1JlY29yZE1hcHBlciwgUmVjb3JkTWFwcGVyUmVnaXN0cnlJbnRlcmZhY2V9IGZyb20gJy4vcmVjb3JkLW1hcHBlci5tb2RlbCc7XG5pbXBvcnQge01hcEVudHJ5LCBPdmVycmlkYWJsZU1hcH0gZnJvbSAnLi4vLi4vdHlwZXMvb3ZlcnJpZGFibGUtbWFwJztcbmltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUmVjb3JkTWFwcGVyUmVnaXN0cnkgaW1wbGVtZW50cyBSZWNvcmRNYXBwZXJSZWdpc3RyeUludGVyZmFjZSB7XG4gICAgcHJvdGVjdGVkIG1hcDogT3ZlcnJpZGFibGVNYXA8UmVjb3JkTWFwcGVyPjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVnaXN0ZXIobW9kdWxlOiBzdHJpbmcsIGtleTogc3RyaW5nLCBtYXBwZXI6IFJlY29yZE1hcHBlcik6IHZvaWQge1xuICAgICAgICB0aGlzLm1hcC5hZGRFbnRyeShtb2R1bGUsIGtleSwgbWFwcGVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZXhjbHVkZShtb2R1bGU6IHN0cmluZywga2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5tYXAuZXhjbHVkZUVudHJ5KG1vZHVsZSwga2V5KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0KG1vZHVsZTogc3RyaW5nKTogTWFwRW50cnk8UmVjb3JkTWFwcGVyPiB7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmdldEdyb3VwRW50cmllcyhtb2R1bGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBoYXMobW9kdWxlOiBzdHJpbmcsIGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG5cbiAgICAgICAgY29uc3QgbW9kdWxlRmllbGRzID0gdGhpcy5tYXAuZ2V0R3JvdXBFbnRyaWVzKG1vZHVsZSk7XG5cbiAgICAgICAgcmV0dXJuICEhbW9kdWxlRmllbGRzW2tleV07XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMubWFwID0gbmV3IE92ZXJyaWRhYmxlTWFwPFJlY29yZE1hcHBlcj4oKTtcbiAgICB9XG59XG4iXX0=