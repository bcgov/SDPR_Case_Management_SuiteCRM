/**
 * SuiteCRM is a customer relationship management program developed by SalesAgility Ltd.
 * Copyright (C) 2021 SalesAgility Ltd.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY SALESAGILITY, SALESAGILITY DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Supercharged by SuiteCRM" logo. If the display of the logos is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Supercharged by SuiteCRM".
 */
import { BehaviorSubject } from 'rxjs';
export class BaseField {
    constructor() {
        this.fieldDependencies = {};
        this.attributeDependencies = [];
        this.valueSubject = new BehaviorSubject({});
        this.valueChanges$ = this.valueSubject.asObservable();
    }
    get value() {
        return this.valueState;
    }
    set value(value) {
        const changed = value !== this.valueState;
        this.valueState = value;
        if (changed) {
            this.emitValueChanges();
        }
    }
    get valueList() {
        return this.valueListState;
    }
    set valueList(value) {
        this.valueListState = value;
        this.emitValueChanges();
    }
    get valueObject() {
        return this.valueObjectState;
    }
    set valueObject(value) {
        this.valueObjectState = value;
        this.emitValueChanges();
    }
    get valueObjectArray() {
        return this.valueObjectArrayState;
    }
    set valueObjectArray(value) {
        this.valueObjectArrayState = value;
        this.emitValueChanges();
    }
    emitValueChanges() {
        this.valueSubject.next({
            value: this.valueState,
            valueList: this.valueListState,
            valueObject: this.valueObjectState
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9jb3JlL2FwcC9jb21tb24vc3JjL2xpYi9yZWNvcmQvZmllbGQubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXdCRztBQUdILE9BQU8sRUFBQyxlQUFlLEVBQWEsTUFBTSxNQUFNLENBQUM7QUE2S2pELE1BQU0sT0FBTyxTQUFTO0lBaUNsQjtRQVZBLHNCQUFpQixHQUFjLEVBQUUsQ0FBQztRQUNsQywwQkFBcUIsR0FBMEIsRUFBRSxDQUFDO1FBVTlDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxlQUFlLENBQWEsRUFBZ0IsQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxRCxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ0wsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFJLEtBQUssQ0FBQyxLQUFhO1FBQ25CLE1BQU0sT0FBTyxHQUFHLEtBQUssS0FBSyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBRTFDLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBRXhCLElBQUksT0FBTyxFQUFFO1lBQ1QsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7U0FDM0I7SUFDTCxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFJLFNBQVMsQ0FBQyxLQUFlO1FBRXpCLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBRTVCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDWCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqQyxDQUFDO0lBRUQsSUFBSSxXQUFXLENBQUMsS0FBVTtRQUN0QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQzlCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFJLGdCQUFnQjtRQUNoQixPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztJQUN0QyxDQUFDO0lBRUQsSUFBSSxnQkFBZ0IsQ0FBQyxLQUFrQjtRQUNuQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDO1FBQ25DLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFUyxnQkFBZ0I7UUFDdEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7WUFDbkIsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQ3RCLFNBQVMsRUFBRSxJQUFJLENBQUMsY0FBYztZQUM5QixXQUFXLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtTQUNyQyxDQUFDLENBQUE7SUFDTixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN1aXRlQ1JNIGlzIGEgY3VzdG9tZXIgcmVsYXRpb25zaGlwIG1hbmFnZW1lbnQgcHJvZ3JhbSBkZXZlbG9wZWQgYnkgU2FsZXNBZ2lsaXR5IEx0ZC5cbiAqIENvcHlyaWdodCAoQykgMjAyMSBTYWxlc0FnaWxpdHkgTHRkLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyXG4gKiB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSB2ZXJzaW9uIDMgYXMgcHVibGlzaGVkIGJ5IHRoZVxuICogRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIHdpdGggdGhlIGFkZGl0aW9uIG9mIHRoZSBmb2xsb3dpbmcgcGVybWlzc2lvbiBhZGRlZFxuICogdG8gU2VjdGlvbiAxNSBhcyBwZXJtaXR0ZWQgaW4gU2VjdGlvbiA3KGEpOiBGT1IgQU5ZIFBBUlQgT0YgVEhFIENPVkVSRUQgV09SS1xuICogSU4gV0hJQ0ggVEhFIENPUFlSSUdIVCBJUyBPV05FRCBCWSBTQUxFU0FHSUxJVFksIFNBTEVTQUdJTElUWSBESVNDTEFJTVMgVEhFXG4gKiBXQVJSQU5UWSBPRiBOT04gSU5GUklOR0VNRU5UIE9GIFRISVJEIFBBUlRZIFJJR0hUUy5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0IFdJVEhPVVRcbiAqIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlXG4gKiBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogSW4gYWNjb3JkYW5jZSB3aXRoIFNlY3Rpb24gNyhiKSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiB2ZXJzaW9uIDMsIHRoZXNlIEFwcHJvcHJpYXRlIExlZ2FsIE5vdGljZXMgbXVzdCByZXRhaW4gdGhlIGRpc3BsYXkgb2YgdGhlXG4gKiBcIlN1cGVyY2hhcmdlZCBieSBTdWl0ZUNSTVwiIGxvZ28uIElmIHRoZSBkaXNwbGF5IG9mIHRoZSBsb2dvcyBpcyBub3QgcmVhc29uYWJseVxuICogZmVhc2libGUgZm9yIHRlY2huaWNhbCByZWFzb25zLCB0aGUgQXBwcm9wcmlhdGUgTGVnYWwgTm90aWNlcyBtdXN0IGRpc3BsYXlcbiAqIHRoZSB3b3JkcyBcIlN1cGVyY2hhcmdlZCBieSBTdWl0ZUNSTVwiLlxuICovXG5cbmltcG9ydCB7U2VhcmNoQ3JpdGVyaWFGaWVsZEZpbHRlcn0gZnJvbSAnLi4vdmlld3MvbGlzdC9zZWFyY2gtY3JpdGVyaWEubW9kZWwnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtBc3luY1ZhbGlkYXRvckZuLCBVbnR5cGVkRm9ybUFycmF5LCBVbnR5cGVkRm9ybUNvbnRyb2wsIFZhbGlkYXRvckZufSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge1JlY29yZH0gZnJvbSAnLi9yZWNvcmQubW9kZWwnO1xuaW1wb3J0IHtGaWVsZExvZ2ljTWFwfSBmcm9tICcuLi9hY3Rpb25zL2ZpZWxkLWxvZ2ljLWFjdGlvbi5tb2RlbCc7XG5pbXBvcnQge09iamVjdE1hcH0gZnJvbSAnLi4vdHlwZXMvb2JqZWN0LW1hcCc7XG5pbXBvcnQge1ZpZXdNb2RlfSBmcm9tICcuLi92aWV3cy92aWV3Lm1vZGVsJztcblxuZXhwb3J0IHR5cGUgRGlzcGxheVR5cGUgPSAnbm9uZScgfCAnc2hvdycgfCAncmVhZG9ubHknIHwgJ2lubGluZScgfCAnZGlzYWJsZWQnIHwgJ2RlZmF1bHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9wdGlvbiB7XG4gICAgdmFsdWU6IHN0cmluZztcbiAgICBsYWJlbD86IHN0cmluZztcbiAgICBsYWJlbEtleT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uRGVmaW5pdGlvbiB7XG4gICAgW2tleTogc3RyaW5nXTogbnVtYmVyIHwgc3RyaW5nO1xuXG4gICAgdHlwZTogc3RyaW5nO1xuICAgIG1pbj86IG51bWJlciB8IHN0cmluZztcbiAgICBtYXg/OiBudW1iZXIgfCBzdHJpbmc7XG4gICAgY29tcGFyZXRvPzogc3RyaW5nO1xuICAgIGJsYW5rPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpZWxkRGVmaW5pdGlvbk1hcCB7XG4gICAgW2tleTogc3RyaW5nXTogRmllbGREZWZpbml0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpZWxkRGVmaW5pdGlvbiB7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICB0eXBlPzogc3RyaW5nOyAvLyBsYWJlbCBrZXkgdG8gdXNlXG4gICAgdm5hbWU/OiBzdHJpbmc7IC8vIG9yaWdpbmFsIGxhYmVsXG4gICAgZHluYW1pY0xhYmVsS2V5Pzogc3RyaW5nO1xuICAgIG9wdGlvbnM/OiBzdHJpbmc7XG4gICAgcmVwb3J0YWJsZT86IGJvb2xlYW47XG4gICAgcmVxdWlyZWQ/OiBib29sZWFuO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbiAgICBkdXBsaWNhdGVfbWVyZ2U/OiBzdHJpbmc7XG4gICAgc291cmNlPzogc3RyaW5nO1xuICAgIGlkPzogc3RyaW5nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbiAgICBpZF9uYW1lPzogc3RyaW5nO1xuICAgIGxpbms/OiBzdHJpbmc7XG4gICAgbW9kdWxlPzogc3RyaW5nO1xuICAgIHR5cGVfbmFtZT86IHN0cmluZztcbiAgICBybmFtZT86IHN0cmluZztcbiAgICB0YWJsZT86IHN0cmluZztcbiAgICByZWFkb25seT86IGJvb2xlYW47XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICAgIGlubGluZV9lZGl0PzogYm9vbGVhbjtcbiAgICB2YWxpZGF0aW9uPzogVmFsaWRhdGlvbkRlZmluaXRpb247XG4gICAgdmFsaWRhdGlvbnM/OiBWYWxpZGF0aW9uRGVmaW5pdGlvbltdO1xuICAgIHRlbXBsYXRlPzogc3RyaW5nO1xuICAgIGRpc3BsYXk/OiBzdHJpbmc7XG4gICAgZGlzcGxheVR5cGU/OiBzdHJpbmc7XG4gICAgZGlzcGxheURpcmVjdGlvbj86IHN0cmluZztcbiAgICBsYXlvdXQ/OiBzdHJpbmdbXTtcbiAgICBzaG93TGFiZWw/OiBhbnk7XG4gICAgZ3JvdXBGaWVsZHM/OiBGaWVsZERlZmluaXRpb25NYXA7XG4gICAgYXR0cmlidXRlRmllbGRzPzogRmllbGREZWZpbml0aW9uTWFwO1xuICAgIHZhbHVlUGF0aD86IHN0cmluZztcbiAgICB2YWx1ZVBhcmVudD86IHN0cmluZztcbiAgICBkeW5hbWljPzogYm9vbGVhbjtcbiAgICBwYXJlbnRlbnVtPzogc3RyaW5nO1xuICAgIGxvZ2ljPzogRmllbGRMb2dpY01hcDtcbiAgICBkaXNwbGF5TG9naWM/OiBGaWVsZExvZ2ljTWFwO1xuICAgIGxpbmVJdGVtcz86IExpbmVJdGVtc01ldGFkYXRhO1xuICAgIG1ldGFkYXRhPzogRmllbGRNZXRhZGF0YTtcbiAgICBkZWZhdWx0Pzogc3RyaW5nO1xuICAgIGRlZmF1bHRWYWx1ZU1vZGVzPzogVmlld01vZGVbXTtcbiAgICBtb2Rlcz86IFZpZXdNb2RlW107XG4gICAgcmVsYXRpb25zaGlwPzogc3RyaW5nO1xuICAgIHJlbGF0aW9uc2hpcE1ldGFkYXRhPzogUmVsYXRpb25zaGlwTWV0YWRhdGFcblxuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWxhdGlvbnNoaXBNZXRhZGF0YSB7XG4gICAgc2lkZTogc3RyaW5nO1xuICAgIHJlbGF0ZWRfaWQ/OiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExpbmVJdGVtc01ldGFkYXRhIHtcbiAgICBkZWZpbml0aW9uOiBGaWVsZERlZmluaXRpb247XG4gICAgbGFiZWxPbkZpcnN0TGluZT86IGJvb2xlYW47XG5cbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBkZWNsYXJlIHR5cGUgRmllbGRDbGlja0NhbGxiYWNrID0gKGZpZWxkOiBGaWVsZCwgcmVjb3JkOiBSZWNvcmQpID0+IHZvaWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmllbGRNZXRhZGF0YSB7XG4gICAgZm9ybWF0PzogYm9vbGVhbjtcbiAgICB0YXJnZXQ/OiBzdHJpbmc7XG4gICAgbGluaz86IGJvb2xlYW47XG4gICAgbGlua1JvdXRlPzogc3RyaW5nO1xuICAgIGxpbmtBc3luY0FjdGlvbj86IHN0cmluZztcbiAgICByb3dzPzogbnVtYmVyO1xuICAgIGNvbHM/OiBudW1iZXI7XG4gICAgZGlnaXRzPzogbnVtYmVyO1xuICAgIGlzQmFzZUN1cnJlbmN5PzogYm9vbGVhbjtcbiAgICBsYWJlbERpc3BsYXk/OiBzdHJpbmc7XG4gICAgb3B0aW9ucyQ/OiBPYnNlcnZhYmxlPE9wdGlvbltdPjtcbiAgICBleHRyYU9wdGlvbnM/OiBPcHRpb25bXTtcbiAgICBvbkNsaWNrPzogRmllbGRDbGlja0NhbGxiYWNrO1xuICAgIHRpbnltY2U/OiBhbnk7XG4gICAgZGF0ZV90aW1lX2Zvcm1hdD86IHN0cmluZztcbiAgICBkaXNwbGF5TG9naWNSZXNldE9uPzogc3RyaW5nO1xuXG4gICAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpZWxkQXR0cmlidXRlTWFwIHtcbiAgICBba2V5OiBzdHJpbmddOiBGaWVsZEF0dHJpYnV0ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZEF0dHJpYnV0ZSBleHRlbmRzIEZpZWxkIHtcbiAgICB2YWx1ZVBhdGg/OiBzdHJpbmc7XG4gICAgdmFsdWVQYXJlbnQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmllbGRNYXAge1xuICAgIFtrZXk6IHN0cmluZ106IEZpZWxkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF0dHJpYnV0ZURlcGVuZGVuY3kge1xuICAgIGZpZWxkOiBzdHJpbmc7XG4gICAgYXR0cmlidXRlOiBzdHJpbmc7XG4gICAgdHlwZXM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgdHlwZSBGaWVsZFNvdXJjZSA9ICdmaWVsZCcgfCAnYXR0cmlidXRlJyB8ICdpdGVtJyB8ICdncm91cEZpZWxkJztcblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZCB7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHZhbHVlPzogc3RyaW5nO1xuICAgIHZhbHVlTGlzdD86IHN0cmluZ1tdO1xuICAgIHZhbHVlT2JqZWN0PzogYW55O1xuICAgIHZhbHVlT2JqZWN0QXJyYXk/OiBPYmplY3RNYXBbXTtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHZhcmRlZkJhc2VkPzogYm9vbGVhbjtcbiAgICBsYWJlbD86IHN0cmluZztcbiAgICBsYWJlbEtleT86IHN0cmluZztcbiAgICBsb2FkaW5nPzogYm9vbGVhbjtcbiAgICBkeW5hbWljTGFiZWxLZXk/OiBzdHJpbmc7XG4gICAgcGFyZW50S2V5Pzogc3RyaW5nO1xuICAgIGF0dHJpYnV0ZXM/OiBGaWVsZEF0dHJpYnV0ZU1hcDtcbiAgICBpdGVtcz86IFJlY29yZFtdO1xuICAgIHJlYWRvbmx5PzogYm9vbGVhbjtcbiAgICBkaXNwbGF5PzogRGlzcGxheVR5cGU7XG4gICAgZGVmYXVsdERpc3BsYXk/OiBzdHJpbmc7XG4gICAgZGVmYXVsdD86IHN0cmluZztcbiAgICBkZWZhdWx0VmFsdWVNb2Rlcz86IFZpZXdNb2RlW107XG4gICAgc291cmNlPzogRmllbGRTb3VyY2U7XG4gICAgdmFsdWVTb3VyY2U/OiAndmFsdWUnIHwgJ3ZhbHVlTGlzdCcgfCAndmFsdWVPYmplY3QnIHwgJ2NyaXRlcmlhJztcbiAgICBtZXRhZGF0YT86IEZpZWxkTWV0YWRhdGE7XG4gICAgZGVmaW5pdGlvbj86IEZpZWxkRGVmaW5pdGlvbjtcbiAgICBjcml0ZXJpYT86IFNlYXJjaENyaXRlcmlhRmllbGRGaWx0ZXI7XG4gICAgZm9ybUNvbnRyb2w/OiBVbnR5cGVkRm9ybUNvbnRyb2w7XG4gICAgaXRlbUZvcm1BcnJheT86IFVudHlwZWRGb3JtQXJyYXk7XG4gICAgdmFsaWRhdG9ycz86IFZhbGlkYXRvckZuW107XG4gICAgYXN5bmNWYWxpZGF0b3JzPzogQXN5bmNWYWxpZGF0b3JGbltdO1xuICAgIHZhbHVlU3ViamVjdD86IEJlaGF2aW9yU3ViamVjdDxGaWVsZFZhbHVlPjtcbiAgICB2YWx1ZUNoYW5nZXMkPzogT2JzZXJ2YWJsZTxGaWVsZFZhbHVlPjtcbiAgICBmaWVsZERlcGVuZGVuY2llcz86IE9iamVjdE1hcDtcbiAgICBhdHRyaWJ1dGVEZXBlbmRlbmNpZXM/OiBBdHRyaWJ1dGVEZXBlbmRlbmN5W107XG4gICAgbG9naWM/OiBGaWVsZExvZ2ljTWFwO1xuICAgIGRpc3BsYXlMb2dpYz86IEZpZWxkTG9naWNNYXA7XG4gICAgcHJldmlvdXNWYWx1ZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEJhc2VGaWVsZCBpbXBsZW1lbnRzIEZpZWxkIHtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICB2YXJkZWZCYXNlZD86IGJvb2xlYW47XG4gICAgbGFiZWw/OiBzdHJpbmc7XG4gICAgbGFiZWxLZXk/OiBzdHJpbmc7XG4gICAgZHluYW1pY0xhYmVsS2V5Pzogc3RyaW5nO1xuICAgIHJlYWRvbmx5PzogYm9vbGVhbjtcbiAgICBkaXNwbGF5PzogRGlzcGxheVR5cGU7XG4gICAgZGVmYXVsdERpc3BsYXk/OiBzdHJpbmc7XG4gICAgZGVmYXVsdD86IHN0cmluZztcbiAgICBkZWZhdWx0VmFsdWVNb2Rlcz86IFZpZXdNb2RlW107XG4gICAgc291cmNlPzogRmllbGRTb3VyY2U7XG4gICAgbWV0YWRhdGE/OiBGaWVsZE1ldGFkYXRhO1xuICAgIGRlZmluaXRpb24/OiBGaWVsZERlZmluaXRpb247XG4gICAgY3JpdGVyaWE/OiBTZWFyY2hDcml0ZXJpYUZpZWxkRmlsdGVyO1xuICAgIGZvcm1Db250cm9sPzogVW50eXBlZEZvcm1Db250cm9sO1xuICAgIGl0ZW1Gb3JtQXJyYXk/OiBVbnR5cGVkRm9ybUFycmF5O1xuICAgIHZhbGlkYXRvcnM/OiBWYWxpZGF0b3JGbltdO1xuICAgIGFzeW5jVmFsaWRhdG9ycz86IEFzeW5jVmFsaWRhdG9yRm5bXTtcbiAgICBhdHRyaWJ1dGVzPzogRmllbGRBdHRyaWJ1dGVNYXA7XG4gICAgdmFsdWVTdWJqZWN0PzogQmVoYXZpb3JTdWJqZWN0PEZpZWxkVmFsdWU+O1xuICAgIHZhbHVlQ2hhbmdlcyQ/OiBPYnNlcnZhYmxlPEZpZWxkVmFsdWU+O1xuICAgIGZpZWxkRGVwZW5kZW5jaWVzOiBPYmplY3RNYXAgPSB7fTtcbiAgICBhdHRyaWJ1dGVEZXBlbmRlbmNpZXM6IEF0dHJpYnV0ZURlcGVuZGVuY3lbXSA9IFtdO1xuICAgIGxvZ2ljPzogRmllbGRMb2dpY01hcDtcbiAgICBkaXNwbGF5TG9naWM/OiBGaWVsZExvZ2ljTWFwO1xuXG4gICAgcHJvdGVjdGVkIHZhbHVlU3RhdGU/OiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHZhbHVlTGlzdFN0YXRlPzogc3RyaW5nW107XG4gICAgcHJvdGVjdGVkIHZhbHVlT2JqZWN0U3RhdGU/OiBhbnk7XG4gICAgcHJvdGVjdGVkIHZhbHVlT2JqZWN0QXJyYXlTdGF0ZT86IE9iamVjdE1hcFtdO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudmFsdWVTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxGaWVsZFZhbHVlPih7fSBhcyBGaWVsZFZhbHVlKTtcbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZXMkID0gdGhpcy52YWx1ZVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlU3RhdGU7XG4gICAgfVxuXG4gICAgc2V0IHZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgY2hhbmdlZCA9IHZhbHVlICE9PSB0aGlzLnZhbHVlU3RhdGU7XG5cbiAgICAgICAgdGhpcy52YWx1ZVN0YXRlID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFZhbHVlQ2hhbmdlcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlTGlzdCgpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlTGlzdFN0YXRlO1xuICAgIH1cblxuICAgIHNldCB2YWx1ZUxpc3QodmFsdWU6IHN0cmluZ1tdKSB7XG5cbiAgICAgICAgdGhpcy52YWx1ZUxpc3RTdGF0ZSA9IHZhbHVlO1xuXG4gICAgICAgIHRoaXMuZW1pdFZhbHVlQ2hhbmdlcygpO1xuICAgIH1cblxuICAgIGdldCB2YWx1ZU9iamVjdCgpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9iamVjdFN0YXRlO1xuICAgIH1cblxuICAgIHNldCB2YWx1ZU9iamVjdCh2YWx1ZTogYW55KSB7XG4gICAgICAgIHRoaXMudmFsdWVPYmplY3RTdGF0ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmVtaXRWYWx1ZUNoYW5nZXMoKTtcbiAgICB9XG5cbiAgICBnZXQgdmFsdWVPYmplY3RBcnJheSgpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9iamVjdEFycmF5U3RhdGU7XG4gICAgfVxuXG4gICAgc2V0IHZhbHVlT2JqZWN0QXJyYXkodmFsdWU6IE9iamVjdE1hcFtdKSB7XG4gICAgICAgIHRoaXMudmFsdWVPYmplY3RBcnJheVN0YXRlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZW1pdFZhbHVlQ2hhbmdlcygpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBlbWl0VmFsdWVDaGFuZ2VzKCkge1xuICAgICAgICB0aGlzLnZhbHVlU3ViamVjdC5uZXh0KHtcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlU3RhdGUsXG4gICAgICAgICAgICB2YWx1ZUxpc3Q6IHRoaXMudmFsdWVMaXN0U3RhdGUsXG4gICAgICAgICAgICB2YWx1ZU9iamVjdDogdGhpcy52YWx1ZU9iamVjdFN0YXRlXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpZWxkVmFsdWUge1xuICAgIHZhbHVlPzogc3RyaW5nO1xuICAgIHZhbHVlTGlzdD86IHN0cmluZ1tdO1xuICAgIHZhbHVlT2JqZWN0PzogYW55O1xufVxuXG5cbiJdfQ==