/**
 * SuiteCRM is a customer relationship management program developed by SalesAgility Ltd.
 * Copyright (C) 2021 SalesAgility Ltd.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY SALESAGILITY, SALESAGILITY DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Supercharged by SuiteCRM" logo. If the display of the logos is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Supercharged by SuiteCRM".
 */
import { BehaviorSubject, forkJoin, of } from 'rxjs';
import { deepClone } from 'common';
import { catchError, distinctUntilChanged, finalize, map, take, tap } from 'rxjs/operators';
const initialState = {
    module: '',
    recordId: '',
    loading: {
        data: false,
        metadata: false
    },
    mode: 'detail',
};
export class BaseRecordContainerStore {
    constructor(appStateStore, meta, message, fieldManager, language, storeFactory) {
        this.appStateStore = appStateStore;
        this.meta = meta;
        this.message = message;
        this.fieldManager = fieldManager;
        this.language = language;
        this.storeFactory = storeFactory;
        /** Internal Properties */
        this.internalState = deepClone(initialState);
        this.metadataState = deepClone({});
        this.store = new BehaviorSubject(this.internalState);
        this.state$ = this.store.asObservable();
        this.metadataStore = new BehaviorSubject({});
        this.metadataState$ = this.metadataStore.asObservable();
        this.subs = [];
        this.meta$ = this.metadataState$;
        this.recordStore = storeFactory.create(this.getViewFields$());
        this.record$ = this.recordStore.state$.pipe(distinctUntilChanged());
        this.stagingRecord$ = this.recordStore.staging$.pipe(distinctUntilChanged());
        this.loading$ = this.state$.pipe(map(state => state.loading.data || state.loading.metadata));
        this.mode$ = this.state$.pipe(map(state => state.mode));
        this.vm$ = this.state$;
    }
    /**
     * Get current module name
     * @returns {string} module
     */
    getModuleName() {
        return this.internalState.module;
    }
    /**
     * Get current record id
     * @returns {string} id
     */
    getRecordId() {
        return this.internalState.recordId;
    }
    /**
     * Get View Context
     * @returns {object} ViewContext
     */
    getViewContext() {
        return {
            module: this.getModuleName(),
            id: this.getRecordId(),
        };
    }
    /**
     * Initial record load if not cached and update state.
     * Returns observable to be used in resolver if needed
     *
     * @param {string} module to use
     * @param {string} recordId to use
     * @param {string} mode to use
     * @returns {object} Observable<any>
     */
    init(module, recordId, mode = 'detail') {
        this.baseInit(module, recordId, mode);
        this.setMetadataLoading(true);
        const $data = forkJoin([this.loadMetadata(), this.load()]);
        return $data.pipe(map(([meta, record]) => record));
    }
    /**
     * Init record
     *
     * @param {object} record to use
     * @param {string} mode to use
     * @param {boolean} loadMetadata to use
     * @returns {object} Observable<any>
     */
    initRecord(record, mode = 'detail', loadMetadata = true) {
        this.baseInit(record.module, record.id, mode);
        if (loadMetadata) {
            this.loadMetadata().pipe(take(1), tap(() => {
                this.setRecord(record);
            })).subscribe();
        }
    }
    /**
     * Init staging
     * @param {object} record
     */
    initStaging(record) {
        const baseRecord = deepClone(this.recordStore.extractBaseRecord(record));
        this.recordStore.setStaging(baseRecord);
    }
    /**
     * Set Record
     * @param {object} record
     */
    setRecord(record) {
        const baseRecord = deepClone(this.recordStore.extractBaseRecord(record));
        this.recordStore.setRecord(baseRecord);
    }
    /**
     * Set Metadata
     * @param {object} meta
     */
    setMetadata(meta) {
        this.updateMetadataState(meta);
        this.setMetadataLoading(false);
    }
    /**
     * Clean destroy
     */
    destroy() {
        this.clear();
    }
    /**
     * Clear observable cache
     */
    clear() {
        this.updateState(deepClone(initialState));
        this.recordStore.destroy();
        this.recordStore = null;
    }
    /**
     * Clear observable cache
     */
    clearAuthBased() {
        this.clear();
    }
    /**
     * Get staging record
     *
     * @returns {string} ViewMode
     */
    getBaseRecord() {
        return this.recordStore.getBaseRecord();
    }
    /**
     * Get current view mode
     *
     * @returns {string} ViewMode
     */
    getMode() {
        if (!this.internalState) {
            return null;
        }
        return this.internalState.mode;
    }
    /**
     * Set new mode
     *
     * @param {string} mode ViewMode
     */
    setMode(mode) {
        this.updateState({ ...this.internalState, mode });
    }
    /**
     * Set loading flag
     *
     * @param {boolean} loading flag
     */
    setDataLoading(loading) {
        this.updateState({
            ...this.internalState,
            loading: {
                ...this.internalState.loading,
                data: loading
            }
        });
    }
    /**
     * Set loading flag
     *
     * @param {boolean} loading flag
     */
    setMetadataLoading(loading) {
        this.updateState({
            ...this.internalState,
            loading: {
                ...this.internalState.loading,
                metadata: loading
            }
        });
    }
    /**
     * Save record
     */
    save() {
        this.setDataLoading(true);
        return this.recordStore.save().pipe(catchError(() => {
            this.message.addDangerMessageByKey('LBL_ERROR_SAVING');
            return of({});
        }), finalize(() => {
            this.setDataLoading(false);
        }));
    }
    /**
     * Validate search filter fields
     *
     * @returns {object} Observable<boolean>
     */
    validate() {
        return this.recordStore.validate();
    }
    /**
     * Load / reload record using current pagination and criteria
     *
     * @param {boolean} useCache if to use cache
     * @returns {object} Observable<RecordViewState>
     */
    load(useCache = true) {
        this.setDataLoading(true);
        return this.recordStore.retrieveRecord(this.internalState.module, this.internalState.recordId, useCache).pipe(tap((data) => {
            this.updateState({
                ...this.internalState,
                recordId: data.id,
                module: data.module,
            });
        }), finalize(() => {
            this.setDataLoading(false);
        }));
    }
    /**
     * Load / reload record using current pagination and criteria
     *
     * @param {boolean} useCache if to use cache
     * @returns {object} Observable<RecordViewState>
     */
    loadMetadata(useCache = true) {
        this.setMetadataLoading(true);
        return this.meta.getMetadata(this.internalState.module).pipe(map(metadata => metadata.recordView), tap((meta) => {
            this.updateMetadataState(meta);
        }), finalize(() => {
            this.setMetadataLoading(false);
        }));
    }
    /**
     * Update the state
     *
     * @param {object} state to set
     */
    updateState(state) {
        this.store.next(this.internalState = state);
    }
    /**
     * Update the metadata state
     *
     * @param {object} state to set
     */
    updateMetadataState(state) {
        this.metadataStore.next(this.metadataState = state);
    }
    /**
     * Get record view metadata
     *
     * @returns {object} metadata M
     */
    getMetadata() {
        return deepClone(this.metadataState);
    }
    /**
     * Base store initialization
     * @param module
     * @param recordId
     * @param mode
     */
    baseInit(module, recordId, mode = 'detail') {
        this.updateState({
            ...this.internalState,
            module,
            recordId,
            mode
        });
    }
}
//# sourceMappingURL=data:application/json;base64,