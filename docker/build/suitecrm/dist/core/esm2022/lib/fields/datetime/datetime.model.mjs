export class DateTimeModel {
    constructor(init) {
        this.hourStep = 1;
        this.minuteStep = 15;
        this.secondStep = 30;
        this.displaySeconds = false;
        Object.assign(this, init);
    }
    static toDateTimeStruct(formatter, dateString) {
        if (!dateString) {
            return null;
        }
        const dateTimeStruct = formatter.userDateTimeFormatToStruct(dateString);
        if (!dateTimeStruct) {
            return null;
        }
        const { date, time } = dateTimeStruct;
        return new DateTimeModel({
            date: date,
            time: time
        });
    }
    static internalToDateTimeStruct(formatter, dateString) {
        if (!dateString) {
            return null;
        }
        const dateTimeStruct = formatter.internalDateTimeFormatToStruct(dateString);
        if (!dateTimeStruct) {
            return null;
        }
        const { date, time } = dateTimeStruct;
        return new DateTimeModel({
            date: date,
            time: time
        });
    }
    toUserFormat(formatter) {
        //prepare datetime string in yyyy-M-d H:m:s format (datetimepicker default)
        const dateString = [this.date.year, this.date.month, this.date.day].join('-');
        const timeString = [this.time.hour, this.time.minute, this.time.second].join(':');
        const datetimeString = [dateString, timeString].join(' ');
        const internalDateTimeString = formatter.toInternalFormat(datetimeString, { fromFormat: 'yyyy-M-d H:m:s' });
        //convert from yyyy-M-d H:m:s format to user format
        return formatter.toUserFormat(internalDateTimeString, { fromFormat: 'yyyy-M-d H:m:s' });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXRpbWUubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9jb3JlL2FwcC9jb3JlL3NyYy9saWIvZmllbGRzL2RhdGV0aW1lL2RhdGV0aW1lLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sT0FBTyxhQUFhO0lBUXRCLFlBQW1CLElBQTZCO1FBUGhELGFBQVEsR0FBRyxDQUFDLENBQUM7UUFDYixlQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLGVBQVUsR0FBRyxFQUFFLENBQUM7UUFDaEIsbUJBQWMsR0FBWSxLQUFLLENBQUM7UUFLNUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsVUFBa0I7UUFDeEQsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNiLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsMEJBQTBCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFeEUsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNqQixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsTUFBTSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsR0FBRyxjQUFjLENBQUM7UUFDcEMsT0FBTyxJQUFJLGFBQWEsQ0FBQztZQUNyQixJQUFJLEVBQUUsSUFBSTtZQUNWLElBQUksRUFBRSxJQUFJO1NBQ2IsQ0FBQyxDQUFDO0lBRVAsQ0FBQztJQUVNLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTLEVBQUUsVUFBa0I7UUFDaEUsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNiLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsOEJBQThCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFNUUsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNqQixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsTUFBTSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsR0FBRyxjQUFjLENBQUM7UUFDcEMsT0FBTyxJQUFJLGFBQWEsQ0FBQztZQUNyQixJQUFJLEVBQUUsSUFBSTtZQUNWLElBQUksRUFBRSxJQUFJO1NBQ2IsQ0FBQyxDQUFDO0lBRVAsQ0FBQztJQUVNLFlBQVksQ0FBQyxTQUE0QjtRQUU1QywyRUFBMkU7UUFDM0UsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5RSxNQUFNLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xGLE1BQU0sY0FBYyxHQUFHLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUxRCxNQUFNLHNCQUFzQixHQUFHLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsRUFBQyxVQUFVLEVBQUUsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDO1FBRTFHLG1EQUFtRDtRQUNuRCxPQUFPLFNBQVMsQ0FBQyxZQUFZLENBQUMsc0JBQXNCLEVBQUUsRUFBQyxVQUFVLEVBQUUsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDO0lBRTFGLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TmdiRGF0ZVN0cnVjdCwgTmdiVGltZVN0cnVjdH0gZnJvbSBcIkBuZy1ib290c3RyYXAvbmctYm9vdHN0cmFwXCI7XG5pbXBvcnQge0RhdGV0aW1lRm9ybWF0dGVyfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvZm9ybWF0dGVycy9kYXRldGltZS9kYXRldGltZS1mb3JtYXR0ZXIuc2VydmljZVwiO1xuXG5leHBvcnQgY2xhc3MgRGF0ZVRpbWVNb2RlbCB7XG4gICAgaG91clN0ZXAgPSAxO1xuICAgIG1pbnV0ZVN0ZXAgPSAxNTtcbiAgICBzZWNvbmRTdGVwID0gMzA7XG4gICAgZGlzcGxheVNlY29uZHM6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBkYXRlOiBOZ2JEYXRlU3RydWN0O1xuICAgIHRpbWU6IE5nYlRpbWVTdHJ1Y3Q7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoaW5pdD86IFBhcnRpYWw8RGF0ZVRpbWVNb2RlbD4pIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBpbml0KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHRvRGF0ZVRpbWVTdHJ1Y3QoZm9ybWF0dGVyLCBkYXRlU3RyaW5nOiBzdHJpbmcpOiBEYXRlVGltZU1vZGVsIHwgbnVsbCB7XG4gICAgICAgIGlmICghZGF0ZVN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0ZVRpbWVTdHJ1Y3QgPSBmb3JtYXR0ZXIudXNlckRhdGVUaW1lRm9ybWF0VG9TdHJ1Y3QoZGF0ZVN0cmluZyk7XG5cbiAgICAgICAgaWYgKCFkYXRlVGltZVN0cnVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qge2RhdGUsIHRpbWV9ID0gZGF0ZVRpbWVTdHJ1Y3Q7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWVNb2RlbCh7XG4gICAgICAgICAgICBkYXRlOiBkYXRlLFxuICAgICAgICAgICAgdGltZTogdGltZVxuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaW50ZXJuYWxUb0RhdGVUaW1lU3RydWN0KGZvcm1hdHRlciwgZGF0ZVN0cmluZzogc3RyaW5nKTogRGF0ZVRpbWVNb2RlbCB8IG51bGwge1xuICAgICAgICBpZiAoIWRhdGVTdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGVUaW1lU3RydWN0ID0gZm9ybWF0dGVyLmludGVybmFsRGF0ZVRpbWVGb3JtYXRUb1N0cnVjdChkYXRlU3RyaW5nKTtcblxuICAgICAgICBpZiAoIWRhdGVUaW1lU3RydWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7ZGF0ZSwgdGltZX0gPSBkYXRlVGltZVN0cnVjdDtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZU1vZGVsKHtcbiAgICAgICAgICAgIGRhdGU6IGRhdGUsXG4gICAgICAgICAgICB0aW1lOiB0aW1lXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgcHVibGljIHRvVXNlckZvcm1hdChmb3JtYXR0ZXI6IERhdGV0aW1lRm9ybWF0dGVyKTogc3RyaW5nIHtcblxuICAgICAgICAvL3ByZXBhcmUgZGF0ZXRpbWUgc3RyaW5nIGluIHl5eXktTS1kIEg6bTpzIGZvcm1hdCAoZGF0ZXRpbWVwaWNrZXIgZGVmYXVsdClcbiAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IFt0aGlzLmRhdGUueWVhciwgdGhpcy5kYXRlLm1vbnRoLCB0aGlzLmRhdGUuZGF5XS5qb2luKCctJyk7XG4gICAgICAgIGNvbnN0IHRpbWVTdHJpbmcgPSBbdGhpcy50aW1lLmhvdXIsIHRoaXMudGltZS5taW51dGUsIHRoaXMudGltZS5zZWNvbmRdLmpvaW4oJzonKTtcbiAgICAgICAgY29uc3QgZGF0ZXRpbWVTdHJpbmcgPSBbZGF0ZVN0cmluZywgdGltZVN0cmluZ10uam9pbignICcpO1xuXG4gICAgICAgIGNvbnN0IGludGVybmFsRGF0ZVRpbWVTdHJpbmcgPSBmb3JtYXR0ZXIudG9JbnRlcm5hbEZvcm1hdChkYXRldGltZVN0cmluZywge2Zyb21Gb3JtYXQ6ICd5eXl5LU0tZCBIOm06cyd9KTtcblxuICAgICAgICAvL2NvbnZlcnQgZnJvbSB5eXl5LU0tZCBIOm06cyBmb3JtYXQgdG8gdXNlciBmb3JtYXRcbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlci50b1VzZXJGb3JtYXQoaW50ZXJuYWxEYXRlVGltZVN0cmluZywge2Zyb21Gb3JtYXQ6ICd5eXl5LU0tZCBIOm06cyd9KTtcblxuICAgIH1cbn1cbiJdfQ==