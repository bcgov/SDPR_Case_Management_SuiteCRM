<?php

namespace ContainerGRi2xj9;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getInstallStepHandlerService extends App_KernelProdContainer
{
    /*
     * Gets the private 'App\Install\Service\Installation\InstallStepHandler' shared autowired service.
     *
     * @return \App\Install\Service\Installation\InstallStepHandler
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 3).'/core/backend/Engine/Service/ProcessSteps/ProcessStepExecutorInterface.php';
        include_once \dirname(__DIR__, 3).'/core/backend/Engine/Service/ProcessSteps/ProcessStepExecutor.php';
        include_once \dirname(__DIR__, 3).'/core/backend/Install/Service/Installation/InstallHandlerInterface.php';
        include_once \dirname(__DIR__, 3).'/core/backend/Install/Service/Installation/InstallStepHandler.php';

        return $container->privates['App\\Install\\Service\\Installation\\InstallStepHandler'] = new \App\Install\Service\Installation\InstallStepHandler(new RewindableGenerator(function () use ($container) {
            yield 0 => (isset($container->factories['service_container']['App\\Install\\Service\\Installation\\Steps\\CheckDBConnection']) ? $container->factories['service_container']['App\\Install\\Service\\Installation\\Steps\\CheckDBConnection']() : $container->load('getCheckDBConnectionService'));
            yield 1 => (isset($container->factories['service_container']['App\\Install\\Service\\Installation\\Steps\\CheckInstallerLock']) ? $container->factories['service_container']['App\\Install\\Service\\Installation\\Steps\\CheckInstallerLock']() : $container->load('getCheckInstallerLockService'));
            yield 2 => (isset($container->factories['service_container']['App\\Install\\Service\\Installation\\Steps\\CreateEnv']) ? $container->factories['service_container']['App\\Install\\Service\\Installation\\Steps\\CreateEnv']() : $container->load('getCreateEnvService'));
            yield 3 => (isset($container->factories['service_container']['App\\Install\\Service\\Installation\\Steps\\CreateSilentInstallConfig']) ? $container->factories['service_container']['App\\Install\\Service\\Installation\\Steps\\CreateSilentInstallConfig']() : $container->load('getCreateSilentInstallConfigService'));
            yield 4 => (isset($container->factories['service_container']['App\\Install\\Service\\Installation\\Steps\\RunLegacyInstall']) ? $container->factories['service_container']['App\\Install\\Service\\Installation\\Steps\\RunLegacyInstall']() : $container->load('getRunLegacyInstallService'));
            yield 5 => (isset($container->factories['service_container']['App\\Install\\Service\\Installation\\Steps\\SystemChecks']) ? $container->factories['service_container']['App\\Install\\Service\\Installation\\Steps\\SystemChecks']() : $container->load('getSystemChecksService'));
        }, 6), ($container->services['monolog.logger.install'] ?? $container->load('getMonolog_Logger_InstallService')));
    }
}
