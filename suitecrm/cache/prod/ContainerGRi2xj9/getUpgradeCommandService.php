<?php

namespace ContainerGRi2xj9;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getUpgradeCommandService extends App_KernelProdContainer
{
    /*
     * Gets the private 'App\Install\Command\UpgradeCommand' shared autowired service.
     *
     * @return \App\Install\Command\UpgradeCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 3).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 3).'/core/backend/Install/Command/BaseCommand.php';
        include_once \dirname(__DIR__, 3).'/core/backend/Install/Command/BaseStepExecutorCommand.php';
        include_once \dirname(__DIR__, 3).'/core/backend/Install/Command/UpgradeCommand.php';
        include_once \dirname(__DIR__, 3).'/core/backend/Engine/Service/ProcessSteps/ProcessStepExecutorInterface.php';
        include_once \dirname(__DIR__, 3).'/core/backend/Engine/Service/ProcessSteps/ProcessStepExecutor.php';
        include_once \dirname(__DIR__, 3).'/core/backend/Install/Service/Upgrade/UpgradeHandlerInterface.php';
        include_once \dirname(__DIR__, 3).'/core/backend/Install/Service/Upgrade/UpgradeHandler.php';

        $container->privates['App\\Install\\Command\\UpgradeCommand'] = $instance = new \App\Install\Command\UpgradeCommand(new \App\Install\Service\Upgrade\UpgradeHandler(new RewindableGenerator(function () use ($container) {
            yield 0 => (isset($container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\AddNewConfigEntries']) ? $container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\AddNewConfigEntries']() : $container->load('getAddNewConfigEntriesService'));
            yield 1 => (isset($container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\BackupOriginalModules']) ? $container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\BackupOriginalModules']() : $container->load('getBackupOriginalModulesService'));
            yield 2 => (isset($container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\CheckPackage']) ? $container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\CheckPackage']() : $container->load('getCheckPackageService'));
            yield 3 => (isset($container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\CheckPermissions']) ? $container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\CheckPermissions']() : $container->load('getCheckPermissionsService'));
            yield 4 => (isset($container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\ClearSymfonyCache']) ? $container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\ClearSymfonyCache']() : $container->load('getClearSymfonyCacheService'));
            yield 5 => (isset($container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\ExtractPackage']) ? $container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\ExtractPackage']() : $container->load('getExtractPackageService'));
            yield 6 => (isset($container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\FinalizeClearSymfonyCache']) ? $container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\FinalizeClearSymfonyCache']() : $container->load('getFinalizeClearSymfonyCacheService'));
            yield 7 => (isset($container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\InstallUpgradePackage']) ? $container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\InstallUpgradePackage']() : $container->load('getInstallUpgradePackageService'));
            yield 8 => (isset($container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\LegacyPostUpgrade']) ? $container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\LegacyPostUpgrade']() : $container->load('getLegacyPostUpgradeService'));
            yield 9 => (isset($container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\MetadataMerge']) ? $container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\MetadataMerge']() : $container->load('getMetadataMergeService'));
            yield 10 => (isset($container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\RunMigrations']) ? $container->factories['service_container']['App\\Install\\Service\\Upgrade\\Steps\\RunMigrations']() : $container->load('getRunMigrationsService'));
        }, 11), ($container->services['monolog.logger.upgrade'] ?? $container->load('getMonolog_Logger_UpgradeService'))));

        $instance->setDefaultSessionName('PHPSESSID');
        $instance->setLegacySessionName('LEGACYSESSID');
        $instance->setSession(($container->services['session'] ?? $container->getSessionService()));
        $instance->setAppStringsHandler(($container->privates['App\\Languages\\LegacyHandler\\AppStringsHandler'] ?? $container->load('getAppStringsHandlerService')));
        $instance->setName('suitecrm:app:upgrade');

        return $instance;
    }
}
