## helm dependency update ./suitecrm
## helm install suitecrm ./suitecrm/ -f <customfile.yaml>
## To generate a new one, run on any host> php -r 'echo base64_encode(random_bytes(32)), PHP_EOL;'

Secrets:
  suitecrmadminpwd: "changeme"
  suitecrmhost: "suitecrmdemo-dev.apps.gold.devops.gov.bc.ca"
  sso_domain: "keycloakservername"
  sso_realm: "standard"
  sso_clientid: "keycloakclientid"
  sso_idp_x509: "getfromsso"
  oauthkey:  "changeme"

## Dependency Redis Cluster
redis-cluster:
  persistence:
    size: 100Mi
  redis:
    resources:
      requests:
        cpu: "10m"
        memory: "50Mi"
      limits:
        cpu: "50m"
        memory: "250Mi"
  global:
    redis:
      password: "changeme"
  usePassword: false

## Dependency HA DB

mariadb-galera:
  enabled: true
  galera:
    mariabackup:
      password: changeme
  rootUser:
    password: changeme
  db:
    ## @param db.user Username of new user to create
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mariadb-galera#creating-a-database-user-on-first-run
    ##
    user: changeme
    ## @param db.password Password for the new user. Ignored if existing secret is provided.
    ##
    password: changeme
    ## @param db.name Name for new database to create
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mariadb-galera#creating-a-database-on-first-run
    ##
    name: changeme
  podSecurityContext:
    enabled: false
  containerSecurityContext:
    enabled: false
  replicaCount: 1
  persistence:
    size: 2G

## Dependecy Backup Storage

backup-storage:
  image:
    repository: docker.io/bcgovimages/backup-container-mariadb
    pullPolicy: Always
    tag: latest

  persistence:
    backup:
      claimName: db-backup-pvc
    verification:
      claimName: db-backup-verification-pvc
      mountPath: /var/lib/mysql/data

  db:
    secretName: advocase-database-credentials
    usernameKey: mariadb-galera-root-user
    passwordKey: mariadb-root-password

  env:
    DATABASE_SERVICE_NAME:
      value: suitecrm-mariadb-galera
    NUM_BACKUPS:
      value: "31"
    DAILY_BACKUPS:
      value: "6"
    WEEKLY_BACKUPS:
      value: "4"
    MONTHLY_BACKUPS:
      value: "1"
    MYSQL_USER:
      value: "user"
    MYSQL_PASSWORD:
      value: "user123"
    MYSQL_DATABASE:
      value: "advocase"
    MYSQL_ROOT_PASSWORD:
      value: "root"

  backupConfig: |
    suitecrm-mariadb-galera:3306/advocase

    0 1 * * * default ./backup.sh -s
    0 4 * * * default ./backup.sh -s -v all

# Default values for suitecrm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: image-registry.openshift-image-registry.svc:5000/d0d1b5-tools/bcgovsuitecrm
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP

ingress:
  ingressClassName: "openshift-default"
  annotations:
  enabled: true # create an ingress for this component
  hostname: "{{tpl .Values.Secrets.suitecrmhost .}}"
  port: 8181
  tls: true
  selfSigned: false
  extraTls:
    - {}

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: shared-uploads
    persistentVolumeClaim:
      claimName: cbsuitecrm-uploads-shared
# Additional volumeMounts on the output Deployment definition.
volumeMounts: 
  - name: shared-uploads
    mountPath: /suitecrm/public/legacy/upload
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true
persistence:
  enabled: true
  accessModes: 
    - ReadWriteMany
  size: 1G
nodeSelector: {}
tolerations: []
affinity: {}